{"version":3,"sources":["components/ContactForm.js","firebase.js","components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["ContactFom","props","initialValues","fullName","mobile","email","address","useState","values","setValues","validated","setValidated","useEffect","currentId","contactObjects","handleChange","e","target","name","value","Form","noValidate","onSubmit","currentTarget","checkValidity","preventDefault","stopPropagation","addOrEdit","alert","className","id","Control","type","placeholder","onChange","required","Feedback","pattern","as","fireDB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setContactObjects","setCurrentId","FirebaseDB","child","on","snapshot","val","Fragment","style","fontWeight","fontSize","obj","push","err","console","log","set","Object","keys","map","key","onClick","window","confirm","remove","handleDelete","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6008a91a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst ContactFom = (props) => {\r\n    const initialValues = {\r\n        fullName: \"\",\r\n        mobile: \"\",\r\n        email: \"\",\r\n        address: \"\"\r\n      }\r\n    \r\n    const [values, setValues] = useState(initialValues)\r\n    const [validated, setValidated] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if(props.currentId==='') {\r\n            setValues({\r\n                ...initialValues\r\n            })\r\n        }\r\n        else {\r\n            setValues({\r\n                ...props.contactObjects[props.currentId]\r\n            })\r\n        }\r\n    }, [props.currentId, props.contactObjects])\r\n     \r\n    const handleChange = e => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        const form = e.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n        }\r\n        else {\r\n            props.addOrEdit(values)\r\n            alert(\"Your details have been submitted successfully!\")\r\n        }\r\n        setValidated(true);\r\n    }\r\n\r\n    return ( \r\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <div className=\"input-group mb-3\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><i className=\"fas fa-user\"></i></span>\r\n                </div>\r\n                <Form.Control type=\"text\" name=\"fullName\" placeholder=\"Full Name\" \r\n                    value={values.fullName}\r\n                    onChange={handleChange}\r\n                    required\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Please choose a username.\r\n                </Form.Control.Feedback>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\"><i className=\"fas fa-mobile-alt\"></i></span>\r\n                        </div>\r\n                        <Form.Control type=\"text\" name=\"mobile\" placeholder=\"Mobile\" \r\n                            value={values.mobile}\r\n                            onChange={handleChange}\r\n                            pattern=\"[0-9]{10}\"\r\n                            required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter a valid 10 digit mobile number.\r\n                        </Form.Control.Feedback>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\"><i className=\"fas fa-envelope\"></i></span>\r\n                        </div>\r\n                        <Form.Control type=\"text\" name=\"email\" placeholder=\"Email\" \r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n                            required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter a valid email.\r\n                        </Form.Control.Feedback>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"input-group mb-3\">\r\n                <Form.Control as=\"textarea\" name=\"address\" placeholder=\"Address\" \r\n                    value={values.address}\r\n                    onChange={handleChange}\r\n                    required\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Please enter your address.\r\n                </Form.Control.Feedback>\r\n            </div>\r\n            <button className=\"btn btn-primary btn-block\">{props.currentId===''?\"Save\":\"Update\"}</button>\r\n            <br/>\r\n        </Form>\r\n     );\r\n}\r\n \r\nexport default ContactFom;","import * as firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBd8U-OBQ_wuUMu6Ei2rIpnK3Bkc5cYiQ0\",\r\n    authDomain: \"contact-crud-firebase.firebaseapp.com\",\r\n    databaseURL: \"https://contact-crud-firebase.firebaseio.com\",\r\n    projectId: \"contact-crud-firebase\",\r\n    storageBucket: \"contact-crud-firebase.appspot.com\",\r\n    messagingSenderId: \"524893167845\",\r\n    appId: \"1:524893167845:web:e2159b926f970a334e340c\"\r\n  };\r\n  // Initialize Firebase\r\nvar fireDB = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDB.database().ref()","import React, { useState, useEffect } from \"react\";\r\nimport ContactFom from \"./ContactForm\";\r\nimport FirebaseDB from \"../firebase\";\r\n\r\nconst Contacts = () => {\r\n    const [contactObjects, setContactObjects] = useState({})\r\n    const [currentId, setCurrentId] = useState('')\r\n\r\n    useEffect(() => {\r\n        FirebaseDB.child('contacts').on('value', snapshot => {\r\n            if(snapshot.val()!=null)\r\n                setContactObjects({\r\n                    ...snapshot.val()\r\n                })\r\n            else\r\n                setContactObjects({})\r\n        })\r\n    }, [])\r\n\r\n    const addOrEdit = obj => {\r\n        if(currentId===''){\r\n            FirebaseDB.child('contacts').push(\r\n                obj,\r\n                err => {\r\n                    if(err) {\r\n                        console.log(err)\r\n                    }\r\n                    else {\r\n                        setCurrentId('')\r\n                    }\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            FirebaseDB.child(`contacts/${currentId}`).set(\r\n                obj,\r\n                err => {\r\n                    if(err) {\r\n                        console.log(err)\r\n                    }\r\n                    else {\r\n                        setCurrentId('')\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleDelete = id => {\r\n        if(window.confirm(\"Are you sure to delete this record?\")) {\r\n            FirebaseDB.child(`contacts/${id}`).remove(\r\n                err => {\r\n                    if(err) {\r\n                        console.log(err)\r\n                    }\r\n                    else {\r\n                        setCurrentId('')\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"jumbotron\">\r\n                <h1 className=\"display-4 text-center\" style={{fontWeight: 'bolder', fontSize: '40px'}}>Contact Register</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-5\">\r\n                    <ContactFom {...({addOrEdit, currentId, contactObjects})} />\r\n                </div>\r\n                <div className=\"col-lg-7\">\r\n                    <table className=\"table table-borderless table-stripped\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th>Full Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Email</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(contactObjects).map(id => {\r\n                                    return (\r\n                                        <tr key={id}>\r\n                                            <td>{contactObjects[id].fullName}</td>\r\n                                            <td>{contactObjects[id].mobile}</td>\r\n                                            <td>{contactObjects[id].email}</td>\r\n                                            <td>\r\n                                                <a className=\"btn text-primary\" onClick={() => {setCurrentId(id)}}><i className=\"fas fa-pencil-alt\"></i></a>\r\n                                                <a className=\"btn text-danger\" onClick={() => {handleDelete(id)}}><i className=\"fas fa-trash-alt\"></i></a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n     );\r\n}\r\n \r\nexport default Contacts;","import React from 'react';\nimport './App.css';\nimport Contacts from \"./components/Contacts\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <Contacts />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}